from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import Form
import aiohttp
from config import WEATHER_API_KEY

router = Router()

users = {}


@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –∏ –≤–æ–¥—ã.\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/set_profile - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è üìù\n"
        "/log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥—ã üí¶\n"
        "/log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞> - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥—ã üçú\n"
        "/log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)> - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üí™\n"
        "/check_progress - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ üìä"
    )


@router.message(Command("set_profile"))
async def start_profile_setup(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥)")
    await state.set_state(Form.weight)


@router.message(Form.weight)
async def process_weight(message: Message, state: FSMContext):
    user_id = message.from_user.id
    users.setdefault(user_id, {})
    users[user_id]["weight"] = int(message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º)")
    await state.set_state(Form.height)


@router.message(Form.height)
async def process_height(message: Message, state: FSMContext):
    user_id = message.from_user.id
    users[user_id]["height"] = int(message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç")
    await state.set_state(Form.age)


@router.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    user_id = message.from_user.id
    users[user_id]["age"] = int(message.text)
    await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –≤—ã –∞–∫—Ç–∏–≤–Ω—ã?")
    await state.set_state(Form.activity_level)


@router.message(Form.activity_level)
async def process_activity_level(message: Message, state: FSMContext):
    user_id = message.from_user.id
    users[user_id]["activity"] = int(message.text)
    await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(Form.city)


@router.message(Form.city)
async def process_city(message: Message, state: FSMContext):
    user_id = message.from_user.id
    users[user_id]["city"] = message.text
    await message.reply("–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º?")
    await state.set_state(Form.calorie_goal)


@router.message(Form.calorie_goal)
async def process_calorie_goal(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        users[user_id]["calorie_goal"] = int(message.text)
        user_data = users[user_id]
        await message.reply(
            f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω:\n–í–µ—Å: {user_data['weight']} –∫–≥\n"
            f"–†–æ—Å—Ç: {user_data['height']} —Å–º\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
            f"–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_data['activity']} –º–∏–Ω—É—Ç\n"
            f"–ì–æ—Ä–æ–¥: {user_data['city']}\n"
            f"–¶–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º: {user_data['calorie_goal']}\n"
        )
        await state.clear()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º.")


@router.message(Command("log_water"))
async def log_water(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return

    user_id = message.from_user.id
    if user_id in users:
        try:
            args = message.text.split()
            if len(args) != 2:
                raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã")

            amount = int(args[1])

            weight = users[user_id]["weight"]
            activity = users[user_id]["activity"]
            city = users[user_id]["city"]

            base_water = weight * 30
            additional_water = (activity // 30) * 500

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ OpenWeatherMap API
            async with aiohttp.ClientSession() as session:
                weather_response = await session.get(
                    f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric"
                )
                weather_data = await weather_response.json()

                if weather_data.get("main"):
                    temperature = weather_data["main"]["temp"]
                    if temperature > 25:
                        additional_water += 750

                    total_water_goal = base_water + additional_water
                    users[user_id]["water_goal"] = total_water_goal

                    users[user_id]["logged_water"] = (
                        users[user_id].get("logged_water", 0) + amount
                    )

                    remaining_water = total_water_goal - users[user_id]["logged_water"]

                    await message.reply(
                        f"–í—ã –≤—ã–ø–∏–ª–∏ {amount} –º–ª –≤–æ–¥—ã.\n"
                        f"–í–∞—à–∞ –Ω–æ—Ä–º–∞ –≤–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {total_water_goal} –º–ª\n"
                        f"–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {remaining_water} –º–ª"
                    )
                else:
                    await message.reply(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥."
                    )
        except ValueError:
            await message.reply(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
                "/log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /log_water 500"
            )
        except Exception as e:
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")


@router.message(Command("log_food"))
async def log_food(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return

    user_id = message.from_user.id
    try:
        command_parts = message.text.split(maxsplit=1)
        if len(command_parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")

        food_item = command_parts[1]

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ OpenFoodFacts API
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"https://world.openfoodfacts.org/cgi/search.pl?action=process&search_terms={food_item}&json=true"
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    products = data.get("products", [])
                    if products:
                        first_product = products[0]
                        product_name = first_product.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        calories_per_100g = first_product.get("nutriments", {}).get(
                            "energy-kcal_100g", 0
                        )

                        await message.reply(
                            f"{product_name} ‚Äî {calories_per_100g} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
                        )

                        users[user_id]["temp_food_data"] = {
                            "product_name": product_name,
                            "calories_per_100g": calories_per_100g,
                        }
                    else:
                        await message.reply(
                            "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ."
                        )
                else:
                    await message.reply(
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
    except ValueError:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "/log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /log_food –±–∞–Ω–∞–Ω"
        )
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@router.message(lambda message: message.text.isdigit())
async def process_food_amount(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id in users and "temp_food_data" in users[user_id]:
        try:
            amount = int(message.text)
            food_data = users[user_id]["temp_food_data"]

            calories = (food_data["calories_per_100g"] * amount) / 100

            users[user_id]["logged_calories"] = (
                users[user_id].get("logged_calories", 0) + calories
            )

            await message.reply(
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {food_data['product_name']}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount} –≥\n"
                f"–ö–∞–ª–æ—Ä–∏–π: {calories:.1f}\n"
                f"–í—Å–µ–≥–æ –∫–∞–ª–æ—Ä–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {users[user_id]['logged_calories']:.1f}"
            )

            del users[user_id]["temp_food_data"]

        except ValueError:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≥—Ä–∞–º–º.")


@router.message(Command("log_workout"))
async def log_workout(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return

    user_id = message.from_user.id
    try:
        command_parts = message.text.split()
        if len(command_parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")

        workout_type = command_parts[1]
        duration = int(command_parts[2])

        if user_id in users:
            burned_calories = duration * 10
            users[user_id]["burned_calories"] = (
                users[user_id].get("burned_calories", 0) + burned_calories
            )

            additional_water = (duration // 30) * 200
            users[user_id]["logged_water"] = (
                users[user_id].get("logged_water", 0) + additional_water
            )

            await message.reply(
                f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞:\n"
                f"–¢–∏–ø: {workout_type}\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω—É—Ç\n"
                f"–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {burned_calories}\n"
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤–æ–¥—ã: {additional_water} –º–ª"
            )
        else:
            await message.reply(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile."
            )
    except ValueError:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
            "/log_workout <—Ç–∏–ø> <–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30"
        )
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("check_progress"))
async def check_progress(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return

    user_id = message.from_user.id
    if user_id in users:
        user_data = users[user_id]
        await message.reply(
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
            f"–í–æ–¥–∞: {user_data.get('logged_water', 0)} –º–ª –∏–∑ {user_data.get('water_goal', 0)} –º–ª\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: {user_data.get('logged_calories', 0)} –∏–∑ {user_data.get('calorie_goal', 0)} –∫–∞–ª–æ—Ä–∏–π\n"
            f"–°–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {user_data.get('burned_calories', 0)}"
        )
    else:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")


def setup_handlers(dp):
    dp.include_router(router)
